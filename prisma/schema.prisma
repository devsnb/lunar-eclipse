generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Sex {
  MALE
  FEMALE
  OTHERS
  PREFER_NOT_TO_SAY
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  sex           Sex       @default(PREFER_NOT_TO_SAY)
  dob           DateTime
  email         String    @unique
  password      String
  contactNumber String?
  role          Role      @default(MEMBER)
  addresses     Address[]
  Order         Order[]
  reviews       Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  area          String
  landmark      String
  pincode       Int
  contactNumber String
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @db.ObjectId
  billedOrders  Order[] @relation("BillingAddress")
  shippedOrders Order[] @relation("ShippingAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  mrp            Float
  sellingPrice   Float
  hsn            Int?
  available      Boolean
  photos         String[]
  rating         Float
  availableUnits Int

  orderedProductSnapshots OrderedProductSnapshot[]
  category                Category                 @relation(fields: [categoryId], references: [id])
  categoryId              String                   @db.ObjectId

  reviews Review[]

  carts   Cart[]   @relation(fields: [cartIds], references: [id])
  cartIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  parentId String?   @unique @db.ObjectId
  parent   Category? @relation("Category", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child    Category? @relation("Category")
  Product  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  rating      Float
  title       String?
  description String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  products        Product[] @relation(fields: [productIds], references: [id])
  productIds      String[]  @db.ObjectId
  items           Int
  shippingCharges Float
  tax             Float
  total           Float
}

enum OrderStatus {
  CREATED
  PAYMENT_PENDING
  PAYMENT_RECEIVED
  PROCESSING
  SHIPPED
  DELAYED
  DELIVERED
}

model OrderedProductSnapshot {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  hsn       Int
  soldPrice Float

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId

  createdAt DateTime @default(now())
}

model Order {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  status OrderStatus

  products OrderedProductSnapshot[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String  @db.ObjectId

  billingAddress   Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String  @db.ObjectId

  payment   Payment?
  paymentId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
